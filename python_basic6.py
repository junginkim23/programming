# -*- coding: utf-8 -*-
"""python_basic6

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y0HPQKfC9i9JNK5MsJTNJ_VgXXxiMkEi
"""

import numpy as np
print(np.__version__)

list_mat = [[1,2,3], [3,6,9], [2,4,6]]
matrix = np.array(list_mat)
print(matrix)
print(matrix.shape)
print(type(matrix))

## 0부터 1 사이의 임의의 수로 matrix 생성
matrix = np.random.rand(3,3)
print(matrix)

## 0으로 채워진 matrix 생성
matrix = np.zeros((3,3))
print(matrix)

# ## numpy 숫자 연산 : +, -, *, %
list_mat = [[1,2,3], [3,6,9], [2,4,6]]
matrix = np.array(list_mat)
print(matrix)
print(matrix + 3)
print(matrix - 3)
print(matrix * 3)
print(matrix / 3)

## numpy matrix 연산 
matrix1 = np.array([[1,2,3], [4,5,6], [7,8,9]])
matrix2 = np.array([[1,0,0], [0,1,0], [0,0,1]])

print(matrix1)
print(matrix2)

print(matrix1 + matrix2)
print(matrix1 - matrix2)
print(matrix1 * matrix2)
print(matrix1 / matrix2) # 0으로 나누는 경우 주의해야 함

## Matrix와 Vector 연산 
matrix = np.array([[1,2,3], [4,5,6], [7,8,9]])
vector = np.array([1,2,3])

print(matrix)
print(vector)

print(matrix * vector) # 메트릭스의 행들과 vector의 곱 연산 진행 
# print(matrix @ vector) # 메트릭스의 행들과 vector의 행렬곱 연산 진행  
# print(matrix.dot(vector)) # @ 대신 이와같이 표현 가능

# matrix slicing 
matrix = np.array([[1,2,3], [3,6,9], [2,4,6]])

print(matrix)

print(matrix[1, :])
print(matrix[1, 2])
print(matrix[1][2])
print(matrix[1:3])
print(matrix[:,1])
# 노란 box는 어떻게 해야 프린트 할 수 있을까요??
print(matrix[1:,1:])

## numpy를 이용한 파일 입/출력 
matrix = np.loadtxt('populations.txt')
print(matrix)
print(type(matrix))
np.savetxt('populations2.txt', matrix)

## Tokenize 

import nltk 
print(nltk.__version__)
nltk.download('punkt')

sentence = "Hi HI . This is Tom . I have many cars ."
sentence = sentence.lower()
tokens = nltk.word_tokenize(sentence)
print(tokens)

text = nltk.Text(tokens)
print(text)
print(text.tokens)
print(len(text.tokens))
print(len(set(text.tokens)))
set(text.tokens)

for token in text.vocab():
    print(token, text.vocab()[token])
text.plot()

print(text.count('.'))
print(text.count('many'))
print(text.count('cars'))
text.dispersion_plot(['.'])

## Stop Words

import nltk
from nltk.corpus import stopwords

sentence = "Hi . This is Tom . I have many cars ."
sentence = sentence.lower()
tokens = nltk.word_tokenize(sentence)
# print(tokens)


nltk.download('stopwords')
stop = set(stopwords.words('english'))
tokens = [t for t in tokens if t not in stop]
print(tokens)

print('the' in stop)

## Stemming 
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer

sentence = "Hi . This is Tom . I have many cars ."
sentence = sentence.lower()
tokens = nltk.word_tokenize(sentence)
stop = set(stopwords.words('english'))
tokens = [t for t in tokens if t not in stop]
print(tokens)

porter_stemmer = PorterStemmer()
tokens = [porter_stemmer.stem(token) for token in tokens]
print(tokens)

## Documents similarity 
def get_sim(A, B):
    s1 = np.dot(A, B)
    s2 = np.sqrt(np.sum(A*A))
    s3 = np.sqrt(np.sum(B*B)) 
    return s1 / (s2*s3)

Doc1 = np.array([1, 0, 0, 1, 0])
Doc2 = np.array([0, 1, 0, 1, 0])
Doc3 = np.array([0, 0, 1, 0, 1])
Doc4 = np.array([1, 1, 0, 0, 0])

print('Similarity b.t.w Doc1 and Doc2 : {}'.format(get_sim(Doc1, Doc2)))
print('Similarity b.t.w Doc1 and Doc3 : {}'.format(get_sim(Doc1, Doc3)))
print('Similarity b.t.w Doc1 and Doc4 : {}'.format(get_sim(Doc1, Doc4)))

# ## Homeworks 
# Doc1 = 'Rafael Nadal Parera is tennis player.'
# Doc2 = 'Donald Trump is president.'
# Doc3 = 'Donald Trump has yellow hair.

# # 1. pre-processing (tokenize, stopwords 제거, stemming)
# # 2. Cosine similarity 함수 직접 구현 
# # 3. Doc-word matrix 
# # 4. Similarity 구하기

