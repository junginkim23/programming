# -*- coding: utf-8 -*-
"""python_basic5

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Baqq5AbbQL-NMTcuKJ_FPv6XEiS42pCj
"""

## 클래스 상속 
class Person:
    def greeting(self):
        print('안녕하세요')

class Student(Person):
    def study(self):
        print('공부하기')

kim = Student()
kim.greeting()
kim.study()

## super 
class Person:
    def __init__(self):
        self.num_arm = 2
        print("Person_init")
    
class Student(Person):
    def __init__(self, semester):
        super().__init__()
        print("Student_init")
        self.semester = semester

kim = Student(2)
print('num_arm',kim.num_arm)
print('semester',kim.semester)

## super 생략 
class Person:
    def __init__(self):
        self.num_arm = 2
        print("Person_init")

class Student(Person):
    pass

kim = Student()
print(kim.num_arm)

## 메소드 오버라이딩 
class Person:
    def __init__(self):
        self.num_arm = 2
    def greeting(self):
        print('안녕하세요.')
        
class Student(Person):
    def __init__(self, semester):
        super().__init__()
        self.semester = semester
    def greeting(self):
        super().greeting()
        print(f'석사과정 {self.semester}학기생입니다.')

kim = Student(2)
kim.greeting()
print(kim.num_arm)

## 다중 상속 
class Person:
    def __init__(self):
        self.num_arm = 2
    def greeting(self):
        print('안녕하세요.')

class University:
    def credit_show(self):
        print("A")

class Student(Person, University):
    def __init__(self, semester):
        self.semester = semester

kim = Student(2)
kim.greeting()
kim.credit_show()

## 추상 클래스
# from abc import * # 추상 클래스를 사용하기 위한 모듈 

class StudentBase():
    # @abstractmethod
    def study(self):
        pass
    # @abstractmethod
    def go_to_school(self):
        pass

class Student(StudentBase):
    def study(self):
        print('공부하기')
    def go_to_school(self):
        print('학교가기')

kim = Student()
kim.go_to_school()
kim.study()

## 과제에 필요한 내용 
class Calculator:
    def __init__(self, num1, num2):
        self._num1 = num1
        self._num2 = num2 
    
    def add(self):
        result = self._num1 + self._num2
        return result 
    
    def sub(self):
        result = self._num1 - self._num2
        return result 

    def mul(self):
        result = self._num1 * self._num2
        return result 
        
    def div(self):
        result = self._num1 / self._num2
        return result

class ScienCalculator(Calculator):
  def __init__(self,num1,num2):
    super().__init__(num1,num2)
    self._num1=num1
    self._num2=num2
  
  def pow(self):
    result = self._num1**self._num2
    return result

  def div(self):
    if self._num2 != 0:      
      result = self._num1 / self._num2
      return result
    else:
      return 0

SC = ScienCalculator(10,2)

print('+:',SC.add())
print('-:',SC.sub())
print('*:',SC.mul())
print('/:',SC.div())
print('**:',SC.pow())